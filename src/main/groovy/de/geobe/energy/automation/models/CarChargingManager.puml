@startuml
'https://plantuml.com/state-diagram

scale 1400 width

[*] -right-> inAct

state "Inactive" as inAct
state "Active" as act {

     [*] -r-> noCar : [noCarConnected]

    state "NoCarConnected" as noCar

'    state "CarConnected" as carCon {

        state "Chargeable" as cabl {

        state "connect" as con  <<entryPoint>>
        state "disconnect" as dcon  <<entryPoint>>
        state "takeFullyCharged()" as fch  <<entryPoint>>
'        state "chargeCmdChanged" as ccc <<entryPoint>>

            state "ChargePvSurplus" as cSurplus {
              cSurplus: entry: PvChargeStrategy.startStrategy(this)
              cSurplus: entry: stopCharging()
              cSurplus: exit: PvChargeStrategy.stopStrategy(this)
    '          cSurplus: exit: stopCharging()

              state "Surplus" as sp {
               sp: exit: stopCharging()

                state "ChargeSurplus" as hasPlus {
    '                hasPlus: entry: setCurrent(v)
                    hasPlus: on: surplus(v) : setCurrent(v)
                }

                state "StartChargeSurplus" as waitCh
                    waitCh: entry: setCurrent(v)
                    waitCh: entry: startCharging()
                    waitCh: on: surplus(v) : setCurrent(v)
                    waitCh: on: startedAgain : ignore
                    waitCh: on: stoppedAgain : ignore

            }

                state "NoSurplus" as noPlus {
                  noPlus: on: noSurplus : ignore
                  noPlus: on: startedAgain : ignore
                }

            state lpstart <<start>>

          }

           state "ChargingStopped" as cStop
               cStop: entry: stopCharging()
               cStop: exit: forceDefaultIfStopped()

          state "ChargeTibber" as cTibber
              cTibber: entry: startTibberMonitor
              cTibber: exit: stopTibberMonitor
              cTibber: on: tibberGo : startCharging()
              cTibber: on: tibberHalt : stopCharging()


          state "ChargeAnyway" as cAnyway
              cAnyway: entry: startCharging()
              cAnyway: entry: setCurrent(maxCurrent)
              cAnyway: exit:stopCharging()

          state "switch" as choiceCmd <<choice>>

          note top of choiceCmd
            choice has semantic of switch/case,
            \tsee sequence of cases
          end note

          cabl -l-> choiceCmd : chargeCmdChanged\n | startedAgain
          [*] --> choiceCmd
          cabl -l-> cStop : stopCharging
        }

      state "FullyCharged" as full {

        note as fullNote
            Seems that FullyCharged state of car
            can only be determined by trying to
            charge it. So there is no direct way
            into this state. Thus fullyCharged
            event must be triggered by algorithms
            running inside of one of the
            ChargeXXX states, eg. PVChargeStrategy.
        end note

      }

'    }
     [*] --> con : [carIsConnected]

}
dcon -u-> noCar : carDisconnected
full -l-> noCar : carDisconnected
'cSurplus --> cStop : stopCmd
fch -u-> full : fullyCharged
'cTibber -down-> cStop : stopCmd
'cAnyway --> cStop : stopCmd
cAnyway --> cStop : stoppedAgain
cTibber --> cStop : stoppedAgain
cStop -u-> cExt : extStartCmd
noPlus -r-> cExt : extStartCmd
cExt --> cStop : stoppedAgain
sp --> cStop : stoppedAgain

choiceCmd -r-> lpstart : [4: cmdChargePvSurplus]
choiceCmd -r-> cAnyway : [2: cmdChargeAnyway]
choiceCmd --> cStop : [1: cmdChargeStop]
choiceCmd -r-> cTibber : [3: cmdChargeTibber]
'cStop -up-> choiceCmd : extStartCmd
noCar --> con : carConnected
inAct -down-> act : activate
act -up-> inAct : deactivate

noPlus -right-> sp : surplus(v)
waitCh -down-> hasPlus : charging\t
waitCh -down-> hasPlus : [isCharging]
sp -u-> noPlus : noSurplus
lpstart -r-> noPlus



note "CarChargingManager" as NTop

@enduml
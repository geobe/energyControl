@startuml
'https://plantuml.com/state-diagram

scale 1200 width

[*] -right-> inAct

state "Inactive" as inAct
state "Active" as act {
    act: entry: WallboxMonitor.subscribeState(this)
    act: exit: WallboxMonitor.unsubscribeState(this)

     [*] -r-> noCar : [noCarConnected]

    state "NoCarConnected" as noCar

'    state "CarConnected" as carCon {

        state "Chargeable" as cabl {

        state "connect" as con  <<entryPoint>>
        state "disconnect" as dcon  <<entryPoint>>
        state "takeFullyCharged()" as fch  <<entryPoint>>

            state "ChargePvSurplus" as cSurplus {
              cSurplus: entry: PvChargeStrategy.startStrategy(this)
              cSurplus: entry: stopCharging()
              cSurplus: exit: PvChargeStrategy.stopStrategy(this)
    '          cSurplus: exit: stopCharging()

              state "Surplus" as sp {
               sp: exit: stopCharging()

                state "HasSurplus" as hasPlus {
    '                hasPlus: entry: setCurrent(v)
                    hasPlus: on: surplus(v) : setCurrent(v)
                }

                state "WaitForExtCharge" as waitCh
                    waitCh: entry: setCurrent(v)
                    waitCh: entry: startCharging()
                    waitCh: on: surplus(v) : setCurrent(v)

            }

                state "NoSurplus" as noPlus {
                  noPlus: on: noSurplus : ignore
                  noPlus: on: extStopByApp : ignore
                }

            state lpstart <<start>>

          }

           state "ChargingStopped" as cStop
               cStop: entry: stopCharging()
               cStop: exit: forceDefaultIfStopped()

          state "ChargeTibber" as cTibber
              cTibber: entry: startTibberMonitor
              cTibber: exit: stopTibberMonitor
              cTibber: on: tibberGo : startCharging()
              cTibber: on: tibberHalt : stopCharging()


          state "ChargeAnyway" as cAnyway
              cAnyway: entry: startCharging()
              cAnyway: entry: setCurrent(maxCurrent)
              cAnyway: exit:stopCharging()

          state "switch" as choiceCmd <<choice>>

          note top of choiceCmd
            choice has semantic of switch/case,
            \tsee sequence of cases
          end note

          note left of cStop
              anyStop = stopCharging
              \tStoppedByApp
              \tStoppedByCar
          end note

          [H] -l-> choiceCmd : chargeCmdChanged
          [*] --> choiceCmd
        }

      state "FullyCharged" as full {

        note as fullNote
            FullyCharged obviously
            can only be left
            by disconnecting the car
        end note

      }

      note top of full
            Seems that FullyCharged state of car
            can only be determined by trying to
            charge it. So there is no direct way
            into this state. Thus fullyCharged
            event must be triggered by algorithms
            running inside of one of the
            ChargeXXX states, eg. PVChargeStrategy.
      end note

'    }
     [*] --> con : [isCarConnected]

}
dcon -u-> noCar : carDisconnected
full -l-> noCar : carDisconnected
cSurplus -down-> cStop : anyStop
fch -u-> full : fullyCharged
cTibber -down-> cStop : anyStop
cAnyway --> cStop : anyStop

choiceCmd -l-> cSurplus : [4: cmdChargePvSurplus]
choiceCmd --> cAnyway : [2: cmdChargeAnyway]
choiceCmd --> cStop : [1: cmdChargeStop]
choiceCmd --> cTibber : [3: cmdChargeTibber]
cStop -up-> choiceCmd : extStartCmd

noCar --> con : carConnected
inAct -down-> act : activate
act -up-> inAct : deactivate

noPlus -right-> sp : surplus(v)
waitCh -down-> hasPlus : extChargeCmd
waitCh -down-> hasPlus : [isCharging]
sp -u-> noPlus : noSurplus
lpstart -left-> noPlus

note "CarChargingManager" as NTop

@enduml
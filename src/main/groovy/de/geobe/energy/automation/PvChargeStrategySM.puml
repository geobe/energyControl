@startuml
'https://plantuml.com/state-diagram

scale 1000 width
state "Inactive" as ia
'act -left-> act : [takePowerValues : eval]
state "Active" as act {

'    act: on: powerValues : \n\tcheck stop immediate,\n\tcalculate values,\n\tdelegate to substate

    state "takePowerValues()" as pv <<entryPoint>>
    state "startStrategy()" as start <<entryPoint>>
    state "stopStrategy()" as stop <<entryPoint>>

    start -down-> nc


    state "NotCharging" as nc
    nc: entry: sendNoSurplus

    state ncj <<join>>

 '   state "Filling Stack" as fill

    state "evalPowerValues <<transient>>" as eval
        eval: entry: genEventFromValues()

    state "Charging" as chg {

        state "StartUpCharging" as sc
        sc: entry: sendSurplus(min)

        state "ContinueCharging" as ch
        ch: entry: sendSurplus(calc)

        state "TestAmpCarReduction" as tr
        tr: entry: sendSurplus(min)

        state "HasAmpCarReduction" as hr
        hr: entry: Energy > 0 ?\n\tsendSurplus(min)
        nc --> sc : startCharging

        eval --> [H] : stopCharging ||\nampReduced

    }
    state exit <<exitPoint>>

    eval -left-> [H*] : startCharging ||\ncontinueCharging
    eval --> exit : waitForAverage
    eval -down-> sc : reduceImmediate


    chg -up-> nc : stopCharging

    sc -down-> ch : startCharging ||\ncontinueCharging
    sc --> tr : ampReduced
    ch -left-> ch : startCharging ||\ncontinueCharging
    ch -down-> tr : ampReduced
    tr -up-> ch : startCharging ||\ncontinueCharging
    tr -down-> hr : ampReduced
    hr -up-> ch : startCharging ||\ncontinueCharging
    hr -up-> ncj : [energy == 0] ||\n fullyCharged
    tr -up-> ncj : fullyCharged
    ch --> ncj : fullyCharged
    ncj -up-> nc : :sendFullyCharged()

}

pv --> eval
[*] -left-> ia
'exit -down-> [*] : [stopStrategy]
stop -up-> ia
ia -down-> start
'stop -up-> [*]
@enduml